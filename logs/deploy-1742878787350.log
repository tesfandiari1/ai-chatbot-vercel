[2025-03-25T04:59:47.353Z] Logging to logs/deploy-1742878787350.log
[2025-03-25T04:59:47.355Z] Checking environment variables...
[2025-03-25T04:59:47.355Z] .env.local file found
[2025-03-25T04:59:47.356Z] All required environment variables are set
[2025-03-25T04:59:47.356Z] Running code quality checks...
[2025-03-25T04:59:47.357Z] Running lint checks...
[2025-03-25T04:59:47.359Z] Checking TypeScript types...

> ai-chatbot@0.1.0 lint:fix /Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel
> next lint --fix && biome lint --write --unsafe

[2025-03-25T04:59:49.577Z] TypeScript checks passed successfully
✔ No ESLint warnings or errors
/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:7:30 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Object' as a type.
  
    5 │ type TEntry = typeof import('../../../../../../app/(chat)/chat/[id]/page.js')
    6 │ 
  > 7 │ type SegmentParams<T extends Object = any> = T extends Record<string, any>
      │                              ^^^^^^
    8 │   ? { [K in keyof T]: T[K] extends string ? string | string[] | undefined : never }
    9 │   : T
  
  i Prefer explicitly define the object shape. This type means "any non-nullable value", which is slightly better than 'unknown', but it's still a broad type.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:13:12 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    11 │ // Check that the entry is a valid entry
    12 │ checkFields<Diff<{
  > 13 │   default: Function
       │            ^^^^^^^^
    14 │   config?: {}
    15 │   generateStaticParams?: Function
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:14:12 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use '{}' as a type.
  
    12 │ checkFields<Diff<{
    13 │   default: Function
  > 14 │   config?: {}
       │            ^^
    15 │   generateStaticParams?: Function
    16 │   revalidate?: RevalidateRange<TEntry> | false
  
  i Prefer explicitly define the object shape. '{}' means "any non-nullable value".
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:15:26 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    13 │   default: Function
    14 │   config?: {}
  > 15 │   generateStaticParams?: Function
       │                          ^^^^^^^^
    16 │   revalidate?: RevalidateRange<TEntry> | false
    17 │   dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:25:22 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    24 │   metadata?: any
  > 25 │   generateMetadata?: Function
       │                      ^^^^^^^^
    26 │   viewport?: any
    27 │   generateViewport?: Function
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:27:22 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    25 │   generateMetadata?: Function
    26 │   viewport?: any
  > 27 │   generateViewport?: Function
       │                      ^^^^^^^^
    28 │   experimental_ppr?: boolean
    29 │   
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:70:84 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use '{}' as a type.
  
    68 │ // If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.
    69 │ type OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>
  > 70 │ type Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>
       │                                                                                    ^^
    71 │ 
    72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
  
  i Prefer explicitly define the object shape. '{}' means "any non-nullable value".
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:72:25 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    70 │ type Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>
    71 │ 
  > 72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
       │                         ^^^^^^^^
    73 │ type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
    74 │ type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:73:26 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
  > 73 │ type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
       │                          ^^^^^^^^
    74 │ type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never
    75 │ 
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(chat)/chat/[id]/page.ts:74:84 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
    73 │ type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
  > 74 │ type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never
       │                                                                                    ^^^^^^^^
    75 │ 
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:7:30 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Object' as a type.
  
    5 │ type TEntry = typeof import('../../../../../app/(auth)/login/page.js')
    6 │ 
  > 7 │ type SegmentParams<T extends Object = any> = T extends Record<string, any>
      │                              ^^^^^^
    8 │   ? { [K in keyof T]: T[K] extends string ? string | string[] | undefined : never }
    9 │   : T
  
  i Prefer explicitly define the object shape. This type means "any non-nullable value", which is slightly better than 'unknown', but it's still a broad type.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:13:12 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    11 │ // Check that the entry is a valid entry
    12 │ checkFields<Diff<{
  > 13 │   default: Function
       │            ^^^^^^^^
    14 │   config?: {}
    15 │   generateStaticParams?: Function
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:14:12 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use '{}' as a type.
  
    12 │ checkFields<Diff<{
    13 │   default: Function
  > 14 │   config?: {}
       │            ^^
    15 │   generateStaticParams?: Function
    16 │   revalidate?: RevalidateRange<TEntry> | false
  
  i Prefer explicitly define the object shape. '{}' means "any non-nullable value".
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:15:26 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    13 │   default: Function
    14 │   config?: {}
  > 15 │   generateStaticParams?: Function
       │                          ^^^^^^^^
    16 │   revalidate?: RevalidateRange<TEntry> | false
    17 │   dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:25:22 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    24 │   metadata?: any
  > 25 │   generateMetadata?: Function
       │                      ^^^^^^^^
    26 │   viewport?: any
    27 │   generateViewport?: Function
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:27:22 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    25 │   generateMetadata?: Function
    26 │   viewport?: any
  > 27 │   generateViewport?: Function
       │                      ^^^^^^^^
    28 │   experimental_ppr?: boolean
    29 │   
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:70:84 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use '{}' as a type.
  
    68 │ // If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.
    69 │ type OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>
  > 70 │ type Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>
       │                                                                                    ^^
    71 │ 
    72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
  
  i Prefer explicitly define the object shape. '{}' means "any non-nullable value".
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:72:25 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    70 │ type Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>
    71 │ 
  > 72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
       │                         ^^^^^^^^
    73 │ type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
    74 │ type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:73:26 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
  > 73 │ type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
       │                          ^^^^^^^^
    74 │ type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never
    75 │ 
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

/Users/tristinesfandiari/Desktop/code/vercel-chatbot/ai-chatbot-vercel/.next 2/types/app/(auth)/login/page.ts:74:84 lint/complexity/noBannedTypes ━━━━━━━━━━

  × Don't use 'Function' as a type.
  
    72 │ type FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never
    73 │ type SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never
  > 74 │ type MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never
       │                                                                                    ^^^^^^^^
    75 │ 
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 128.
Checked 205 files in 56ms. No fixes applied.
Found 148 errors.
lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

 ELIFECYCLE  Command failed with exit code 1.
[31m[2025-03-25T04:59:55.124Z] ERROR: Lint checks failed with code 1[39m
